{"mappings":"gfA4HAA,EAAA,a,KC3HAC,OAAOC,eAAeC,EAAS,aAAc,CACzCC,OAAO,IAEXD,EAAQE,QACR,SAAgCC,EAASC,GAChCA,IACDA,EAAMD,EAAQE,MAAM,IAExB,OAAOP,OAAOQ,OAAOR,OAAOS,iBAAiBJ,EAAS,CAClDC,IAAK,CACDH,MAAOH,OAAOQ,OAAOF,M","sources":["src/js/async-repeta.js","node_modules/@swc/helpers/lib/_tagged_template_literal.js"],"sourcesContent":["// ! try.....catch - Отлавление ошибок\n// try {\n//   console.log('Внутри try до myVar');\n\n// setTimeout(() => {\n//   try {\n//     myVar;\n//   } catch (error) {\n//     console.log('Ошибка');\n//   }\n// }, 1000);\n\n//   console.log('Внутри try после myVar');\n// } catch (error) {\n//   console.error('Ошибка');\n// }\n\n// console.log('После try...catch');\n\n// !!!!!!!!!\n// try {\n//   console.log('Внутри try до myVar');\n\n//   MyVar;\n\n//   console.log('Внутри try после myVar');\n// } catch (error) {\n//   console.log(error.stack);\n//   console.log('Ошибка');\n// }\n\n// !!!!!!!!!!async\n\n// function getFruit(name) {\n//   const fruits = {\n//     strawberry: 'ежевика',\n//     kiwi: 'киви',\n//     apple: 'яблуко',\n//   };\n\n//\n// }\n\n// ? Делаем функцию асинхронной\n\n// function getFruit(name) {\n//   const fruits = {\n//     strawberry: 'ежевика',\n//     kiwi: 'киви',\n//     apple: 'яблуко',\n//   };\n\n//   return new Promise(resolve => setTimeout(() => resolve(fruits[name]), 500));\n// }\n\n// function makeSmoothies() {\n//   getFruit('apple').then(apple => {\n//     console.log(apple);\n\n//     getFruit('kiwi').then(kiwi => console.log(kiwi));\n//   });\n// }\n\n//! Перепивывваем через async await - последовательный код\n\n// async function makeSmoothies() {\n//   console.time('makeSmoothies');\n//   const apple = await getFruit('apple');\n//   console.log(apple);\n\n//   const kiwi = await getFruit('kiwi');\n//   console.log(kiwi);\n//   console.timeEnd('makeSmoothies');\n// }\n\n// !Делаем паралельный код\n\n// async function makeSmoothies() {\n//   console.time('makeSmoothies');\n//   const apple = getFruit('apple');\n//   const kiwi = getFruit('kiwi');\n//   const berry = getFruit('strawberry');\n\n//   const fruits = await Promise.all([apple, kiwi, berry]);\n\n//   console.log(fruits);\n//   console.timeEnd('makeSmoothies');\n// }\n\n// !Обрабатываем ошибки\n// async function makeSmoothies() {\n//   try {\n//     console.time('makeSmoothies');\n//     const apple = await getFruit('apple');\n//     console.log(apple);\n\n// const kiwi = await getFruit('kiwi');\n// console.log(kiwi);\n//     console.timeEnd('makeSmoothies');\n//   } catch (error) {\n//     console.log('Ошибка');\n//   }\n// }\n\n// makeSmoothies();\n\n//* экспрес функция\n// const fn = async function () {};\n\n//* стрелочная функция\n// const arr = async () => {};\n\n//* метод обьекта\n// const x = {\n//   async getname() {},\n// };\n\n//* метод класс\n// class X {\n//   async getName() {}\n// }\n\n// !!!!!!!!!!!!!!!!+++++++++++++++++++++++++!!!!!!!!!!!!!\n\nconst BASE_URL = 'http://localhost:4040';\n\nasync function addBook(book) {\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(book),\n  };\n\n  const respons = await fetch(`${BASE_URL}/books`, options);\n  const newBook = await respons.json();\n\n  return newBook;\n}\n\n// Но ошибки мы будем скорей всего обрабатывать во внешнем коде\n\n// async function addBookANdUpdateUI() {\n//   try {\n//     const book = await addBook({});\n//     console.log(book);\n//   } catch (error) {\n//     console.log(error);\n//   }\n// }\n\n// addBookANdUpdateUI();\n\nasync function fetchBooks() {\n  const respons = await fetch`${BASE_URL}/books`;\n  const books = await respons.json();\n  return books;\n}\n\nasync function fetchBookById(bookId) {\n  const respons = await fetch`${BASE_URL}/books/${bookId}`;\n  const book = await respons.json();\n  return book;\n}\n\nasync function deletBook(bookId) {\n  const url = `${BASE_URL}/books/${bookId}`;\n  const options = {\n    method: 'DELETE',\n  };\n\n  const respons = await fetch(url, options);\n  return respons;\n\n  // Можем вернуть удаленную книгу если нам это необходимо\n  // const book = await respons.json();\n  // return book;\n}\n\nasync function updateBookById(update, bookId) {\n  const options = {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(update),\n  };\n\n  const respons = await fetch(`${BASE_URL}/books/${bookId}`, options);\n  const book = respons.json();\n  return book;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _taggedTemplateLiteral;\nfunction _taggedTemplateLiteral(strings, raw) {\n    if (!raw) {\n        raw = strings.slice(0);\n    }\n    return Object.freeze(Object.defineProperties(strings, {\n        raw: {\n            value: Object.freeze(raw)\n        }\n    }));\n}\n"],"names":["parcelRequire","Object","defineProperty","$9150774b557bdbfe$exports","value","default","strings","raw","slice","freeze","defineProperties"],"version":3,"file":"async-repeta.c9f6e7e4.js.map"}