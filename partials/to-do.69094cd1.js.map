{"mappings":"YAAA,IAAMA,EAAM,yDAENC,EAAW,SAAAC,GAaK,OAZpBC,QAAQC,IAAI,QAYLC,MAAMC,KAAKN,EAAKE,E,EA0BnBK,EAAc,SAAAC,GASlB,OARAL,QAAQC,IAAI,mBAAsBK,OAAHD,IAQxBH,MAAMK,OAAO,GAAUD,OAAPT,EAAI,KAAMS,OAAHD,G,EChD1BG,EAAUC,SAASC,eAAe,WAEpCC,EAAY,EAiBhB,SAASC,EAASC,G,IAAMC,EAAAC,UAAAC,OAAA,YAAAD,UAAA,IAAcA,UAAA,GAAEV,EAAAU,UAAAC,OAAA,YAAAD,UAAA,GAAcA,UAAA,GAATJ,EACrCM,EAAOR,SAASS,cAAc,MAG9BC,EAASV,SAASW,eAAeP,GACvCI,EAAKI,YAAYF,GAKIF,EAAhBK,QAAQjB,GAAKA,EAGdS,IACFG,EAAKM,UAAY,WAGnBC,KAAKH,YAAYJ,GACjBQ,EAAYR,E,CAIQ,SAAbQ,EAAYC,GACnB,IAAMC,EAAOlB,SAASS,cAAc,QAC9BU,EAAMnB,SAASW,eAAe,KACpCO,EAAKJ,UAAY,QACjBI,EAAKN,YAAYO,GACjBF,EAAGL,YAAYM,E,CAkB+B,IAA1CE,EAAmB,SAAChB,EAAMC,G,MAAY,CAAED,OAAMC,S,EC5DpD,IAAMgB,EAAOrB,SAASC,eAAe,QACtBD,SAASC,eAAe,UAEhCqB,iBAAiB,SDHxB,WACE,IAAMC,EAAaxB,EAAQyB,MAAMC,OACd,KAAfF,GAIJpB,EAASoB,GAGsBxB,EAAvByB,MAAQ,GAsDc,SAAXpB,G,IACbsB,EAAUN,EAAiBhB,EADRE,UAAAC,OAAA,YAAAD,UAAA,IAAcA,UAAA,IAEvCjB,EAASqC,GAETxB,GAAa,C,CAvD0ByB,CAA3BJ,IATVK,MAAM,4B,ICGcP,EAAnBC,iBAAiB,SDwCO,SAAAO,G,ID3BRjC,EAAIkC,EC2BIC,EAAAF,EAAEE,OACN,OAAnBA,EAAOC,SACTD,EAAOE,UAAUC,OAAO,WD7BPtC,EC+BLmC,EAAOlB,QAAQjB,GD/BNkC,EC+BUC,EAAOE,UAAUE,SAAS,WD9B3D5C,QAAQC,IAAI,gBAAkCK,OAAlBD,EAAG,iBAAsBC,OAAPiC,IAYvCrC,MAAM2C,IAAI,GAAUvC,OAAPT,EAAI,KAAMS,OAAHD,GAAM,CAAES,OAAQyB,KCqBhCC,EAAOE,UAAUE,SAAS,WACnCJ,EAAOM,WAAWC,SAClB3C,EAAYoC,EAAOM,WAAWxB,QAAQjB,I,IC9C1C2C,OAAOjB,iBAAiB,oBD8DxB,YD1DE/B,QAAQC,IAAI,OAGLC,MAAM+C,IAAIpD,GAAKqD,MAAK,SAAAC,G,OAAOA,EAAIC,I,KCyDnCF,MAAK,SAAAG,GAGJ,OAFAA,EAAMC,SAAQ,SAAAhB,G,OAA0B1B,EAAnB0B,EAAJzB,KAAYyB,EAANxB,OAAUwB,EAAFjC,G,IAC/BL,QAAQC,IAAIoD,GACLA,C,IAERH,MAAK,SAAAG,GACJ1C,EACmB,IAAjB0C,EAAMrC,OAAe,EAAIuC,OAAOF,EAAMA,EAAMrC,OAAS,GAAGX,IAAM,C","sources":["src/js/api.js","src/js/functions-todo.js","src/js/to-do.js"],"sourcesContent":["const URL = 'https://6448213150c25337443949ec.mockapi.io/api/todos/';\n\nconst saveTask = task => {\n  console.log('POST');\n  //   const options = {\n  //     method: 'POST',\n  //     body: JSON.stringify(task),\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //     },\n  //   };\n\n  //   return fetch(URL, options);\n\n  // ! Спробуємо через аксіос\n  return axios.post(URL, task);\n};\n\nconst loadTasks = () => {\n  console.log('GET');\n  //   return fetch(URL).then(res => res.json());\n  // ! Спробуємо через аксіос\n  return axios.get(URL).then(res => res.data);\n};\n\nconst updateTasks = (id, status) => {\n  console.log(`PUT: \\n\\tid: ${id} \\n\\tstatus: ${status}`);\n\n  //   const options = {\n  //     method: 'PUT',\n  //     body: JSON.stringify({ isDone: status }),\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //     },\n  //   };\n  //   return fetch(`${URL}/${id}`, options);\n\n  // ! Спробуємо через аксіос\n  return axios.put(`${URL}/${id}`, { isDone: status });\n};\n\nconst deleteTasks = id => {\n  console.log(`DELETE: \\n\\tid: ${id}`);\n\n  //   const options = {\n  //     method: 'DELETE',\n  //   };\n  //   return fetch(`${URL}/${id}`, options);\n\n  // ! Спробуємо через аксіос\n  return axios.delete(`${URL}/${id}`);\n};\n\nexport { saveTask, loadTasks, updateTasks, deleteTasks };\n","import { saveTask, loadTasks, updateTasks, deleteTasks } from './api.js';\n\nconst myInput = document.getElementById('myInput');\n// Константа id яка додається до кожного Лі\nlet currentId = 1;\n\nfunction addNewTask() {\n  const inputValue = myInput.value.trim();\n  if (inputValue === '') {\n    alert('You mast write something!');\n    return;\n  }\n  createLi(inputValue);\n\n  // Після додавання очищаємо поле вводу\n  myInput.value = '';\n\n  // Додаємо функцію яка буде додавати Лі у сторедж\n  addTaskToDB(inputValue);\n}\n\nfunction createLi(text, isDone = false, id = currentId) {\n  const liEl = document.createElement('li');\n\n  // Варіант 1\n  const liText = document.createTextNode(text);\n  liEl.appendChild(liText);\n  // Варіант 2\n  // liEl.textContent = text;\n\n  // Додамо до елементу поле з id\n  liEl.dataset.id = id;\n\n  // Робимо перевірку якщо isDone = true, то запис вже буде додана с класом checked\n  if (isDone) {\n    liEl.className = 'checked';\n  }\n\n  myUL.appendChild(liEl);\n  addCloseBtn(liEl);\n}\n\n// Додаємо функцію крестику\nfunction addCloseBtn(li) {\n  const span = document.createElement('SPAN');\n  const txt = document.createTextNode('\\u00D7');\n  span.className = 'close';\n  span.appendChild(txt);\n  li.appendChild(span);\n}\n\n// При натисканні на Лі додаємо класс\nfunction handleTaskBehaviour({ target }) {\n  if (target.tagName === 'LI') {\n    target.classList.toggle('checked');\n\n    updateTasks(target.dataset.id, target.classList.contains('checked'));\n\n    // Робимо перевірку для відалення елементу\n  } else if (target.classList.contains('close')) {\n    target.parentNode.remove();\n    deleteTasks(target.parentNode.dataset.id);\n  }\n}\n\n// Створює об'єкт нашої задачі в томи вигляді що нам потрібна\nconst createTaskObject = (text, isDone) => ({ text, isDone });\n\n// функція яка буде додавати Лі у сторедж\nfunction addTaskToDB(text, isDone = false) {\n  const newTask = createTaskObject(text, isDone);\n  saveTask(newTask);\n\n  currentId += 1;\n}\n\n// Функція яка буде діставати дані зі стореджа і буде додавати дані у вигляді Лі на сторінку\nfunction fillTasksList() {\n  loadTasks()\n    .then(todos => {\n      todos.forEach(({ text, isDone, id }) => createLi(text, isDone, id));\n      console.log(todos);\n      return todos;\n    })\n    .then(todos => {\n      currentId =\n        todos.length === 0 ? 1 : Number(todos[todos.length - 1].id) + 1;\n    });\n}\n\nexport { addNewTask, handleTaskBehaviour, fillTasksList };\n","import {\n  addNewTask,\n  handleTaskBehaviour,\n  fillTasksList,\n} from './functions-todo.js';\n\nconst myUL = document.getElementById('myUL');\nconst addBtn = document.getElementById('addBtn');\n\naddBtn.addEventListener('click', addNewTask);\n\n// Додаємо при натисканні клас\nmyUL.addEventListener('click', handleTaskBehaviour);\n\n// Подія яка спрацьовує при побудові DOM дерева і ми длдаємо функцію яка буде зберігати всі данні при перезавантаженні сторінки\nwindow.addEventListener('DOMContentLoaded', fillTasksList);\n"],"names":["$8197bff4c39d585a$var$URL","$8197bff4c39d585a$export$2889637ef1bcfccc","task","console","log","axios","post","$8197bff4c39d585a$export$5ff5dd33cfff42ff","id","concat","delete","$d7c8c23e2c105f46$var$myInput","document","getElementById","$d7c8c23e2c105f46$var$currentId","$d7c8c23e2c105f46$var$createLi","text","isDone","arguments","length","liEl","createElement","liText","createTextNode","appendChild","dataset","className","myUL","$d7c8c23e2c105f46$var$addCloseBtn","li","span","txt","$d7c8c23e2c105f46$var$createTaskObject","$87a5a806961da8f4$var$myUL","addEventListener","inputValue","value","trim","newTask","$d7c8c23e2c105f46$var$addTaskToDB","alert","param","status","target","tagName","classList","toggle","contains","put","parentNode","remove","window","get","then","res","data","todos","forEach","Number"],"version":3,"file":"to-do.69094cd1.js.map"}